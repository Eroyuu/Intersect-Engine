diff a/Intersect.Client/Entities/Player.cs b/Intersect.Client/Entities/Player.cs	(rejected hunks)
@@ -58,6 +58,8 @@ public class Player : Entity
 
         public int TargetType;
 
+        public bool TargetOnFocus;
+
         public Player(Guid id, PlayerEntityPacket packet) : base(id, packet)
         {
             for (var i = 0; i < Options.MaxHotbar; i++)
@@ -986,41 +988,92 @@ public bool TryAttack()
             int y = Globals.Me.Y;
             var map = Globals.Me.CurrentMap;
 
+            List<int[]> hitbox = new List<int[]>();
+
             // The latest moving direction of the player
             switch (Globals.Me.Dir)
             {
+
+                // Tabulation used to have a sight of the hitbox.
                 case 0: // Up
+                    hitbox.AddRange(new List<int[]>
+                            {
+                                new int[] { x - 1, y - 1 }, new int[] { x, y - 1 }, new int[] { x + 1, y - 1 },
+                                new int[] { x - 1, y },                              new int[] { x + 1, y },
+                            });
                     y--;
-                    
+
                     break;
                 case 1: // Down
+                    hitbox.AddRange(new List<int[]>
+                            {
+                                new int[] { x - 1, y },                              new int[] { x + 1, y },
+                                new int[] { x - 1, y + 1 }, new int[] { x, y + 1 }, new int[] { x + 1, y + 1 },
+                            });
                     y++;
 
                     break;
                 case 2: // Left
+                    hitbox.AddRange(new List<int[]>
+                            {
+                                new int[] { x - 1, y - 1 }, new int[] { x, y - 1 },
+                                new int[] { x - 1, y },
+                                new int[] { x - 1, y + 1 }, new int[] { x, y + 1 }
+                            });
                     x--;
 
                     break;
                 case 3: // Right
+                    hitbox.AddRange(new List<int[]>
+                            {
+                                new int[] { x, y - 1 }, new int[] { x + 1, y - 1 },
+                                new int[] { x + 1, y },
+                                new int[] { x, y + 1 }, new int[] { x + 1, y + 1 }
+                            });
                     x++;
 
                     break;
+
                 case 4: // UpLeft
+                    hitbox.AddRange(new List<int[]>
+                            {
+                                new int[] { x - 1, y - 1 }, new int[] { x, y - 1 }, new int[] { x + 1, y - 1 },
+                                new int[] { x - 1, y },
+                                new int[] { x - 1, y + 1 }
+                            });
                     y--;
                     x--;
 
                     break;
                 case 5: //UpRight
+                    hitbox.AddRange(new List<int[]>
+                            {
+                                new int[] { x - 1, y - 1 }, new int[] { x, y - 1 }, new int[] { x + 1, y - 1 },
+                                                                                        new int[] { x + 1, y },
+                                                                                        new int[] { x + 1, y + 1 }
+                            });
                     y--;
                     x++;
 
                     break;
                 case 6: // DownLeft
+                    hitbox.AddRange(new List<int[]>
+                            {
+                                new int[] { x - 1, y - 1 },
+                                new int[] { x - 1, y },
+                                new int[] { x - 1, y + 1 }, new int[] { x, y + 1 }, new int[] { x + 1, y + 1 }
+                            });
                     y++;
                     x--;
 
                     break;
                 case 7: // DownRight
+                    hitbox.AddRange(new List<int[]>
+                            {
+                                                                                    new int[] { x + 1, y - 1 },
+                                                                                    new int[] { x + 1, y },
+                                new int[] { x - 1, y + 1 }, new int[] { x, y + 1 }, new int[] { x + 1, y + 1 }
+                            });
                     y++;
                     x++;
 
